version: '3.8'

services:

  mightsea-postgres-test:
    image: postgres:14.3-alpine3.15
    container_name: mightsea-postgres-test
    volumes:
      - ./volumes/postgres-data-test:/var/lib/postgresql/data
      - ./configs/postgres/scripts-test:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: GGHf5P4Ir2TbvgMAtWbf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  storage-1test:
    image: minio/minio:RELEASE.2022-04-26T01-20-24Z
    container_name: mightsea-object-storage-test
    volumes:
      - ./volumes/object-storage-test:/data1
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: K87jX6lmKQTpgEl4miAI
      MINIO_ROOT_PASSWORD: XCefQMpINkUrJu3rdsWA
    entrypoint: sh
    # Becuse we run the docker compose file of the tests with the --exit-code-from backend flag:
    # docker compose -f docker-compose-test.yml up --exit-code-from backend
    # We put the logic of creating the folders/buckets here. The reason is to not use 
    # the mc container so it does not exit before the backend container,
    # therefore stopping all the containers before the tests run.
    command: -c
      'mkdir -p /data1/static
      && /opt/bin/minio server --address :9000 --console-address :9001 /data1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    depends_on:
      mightsea-postgres-test:
        condition: service_healthy

  backend-test:
    build:
      context: ../server
      dockerfile: Dockerfile
      target: dev
    container_name: mightsea-backend-test
    command: npm run test
    env_file:
      - ../server/.env.test
    ports:
      - '5000:5000'
    environment:
      NODE_ENV: test
    volumes:
      - '../server:/opt/app'
      - node-modules-back-test:/opt/app/node_modules
    depends_on:
      storage-1test:
        condition: service_healthy

volumes:
  node-modules-back-test: